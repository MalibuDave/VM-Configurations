This document is designed to help you setup a CentOS box to act as a router/firewall.

Hyper-V Setup 


Decide on your internal IP addresses. The IPs used in this document are only a suggestion.
External - This is the nic card which will connect to the internet 
Internal - This is the nic card which will not connect to the internet and be used to service the internal network and bridge to external 


eth0 (external):
    IP Address: 192.168.1.2
    Netmask: 255.255.255.0
    Gateway: 192.168.1.1

eth1 (internal):
    IP Address: 10.1.1.254 
    Netmask: 255.255.255.0
    Gateway: (leave blank)


Set host name for router 

    sudo hostnamectl set-hostname <router name router.local> 

Edit the hosts file

    sudo nano /etc/hosts 
    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 your-new-hostname


Configure eth0 (this is the extenal nic card that will see the outside world)
    
    Use nmcli 

List the interfaces 
    
    nmcli device (ensure that eth0 is up and connected externally - this is what you setup in Hyper-V)

Configure the interface
(connection-name will be the active nic card from nmcli device - usually eth0 unless you've renamed it)
(the IP address assigned here is specifically for the external nic card)
    
    sudo nmcli con mod eth0 ipv4.addresses 192.168.1.2/24
    sudo nmcli con mod eth0 ipv4.gateway 192.168.1.1
    sudo nmcli con mod eth0 ipv4.method manual
    sudo nmcli con up eth0

Update your box  
    
    yum check-update (Any applications which need to be updated)
    yum upgrade      (We don't need to keep obsolete packages; upgrade over update at this stage)
    yum clean all    (Let's clean up any downloaded packages we don't need)


Config Internal (usually eth1 this is the next nic card in the virtual router)
(connection-name will be the active nic card from nmcli device - usually eth1 unless you've renamed it)
(the IP address assigned here is specifically for the internal nic card or network)
(it is recommended that you use a different class A, B, or C for internal network)
((Note: Internal servers should set their default gateway to 10.1.1.254 to reach external networks via this router.)
    
    sudo nmcli con mod eth1 ipv4.addresses 10.1.1.254/24
    sudo nmcli con mod eth1 ipv4.gateway ""
    sudo nmcli con mod eth1 ipv4.method manual
    sudo nmcli con up eth1

Next we need to bind to zones

    sudo firewall-cmd --zone=internal --add-interface=eth1
        (if the nic is bound to public you need to unbind it)
            sudo firewall-cmd --zone=public --remove-interface=eth1
    (make sure to start from the beginning)
    sudo firewall-cmd --zone=internal --add-interface=eth1
    sudo firewall-cmd --permanent --zone=internal --add-interface=eth1
    sudo firewall-cmd --reload

Next set the firewall default zone 

    sudo firewall-cmd --set-default-zone=external

    
Now verify that all zones are active

    sudo firewall-cmd --get-active-zones
        you should see something that resembles this:
            external
                interfaces: eth0
            internal
                interfaces: eth1

Now we need to edit the sysctl.conf file

    sudo nano /etc/sysctl.conf
        (add the following)
        net.ipv4.ip_forward = 1
        (savee and exit)

update service

    sudo sysctl -p
    (you should get an output that looks like this)
    net.ipv4.ip_forward = 1
    (verify)
    cat /proc/sys/net/ipv4/ip_forward
    (output should be 1)
    1

Now update the eth1 (internal nic card "target")

    sudo firewall-cmd --permanent --zone=internal --set-target=ACCEPT
    sudo firewall-cmd --reload 

Enable NAT Masquerading

    sudo firewall-cmd --zone=external --add-masquerade
    sudo firewall-cmd --permanent --zone=external --add-masquerade
    sudo firewall-cmd --reload

Enable MAC spoofing 

    Set-VMNetworkAdapter -VMName "YourVMName" -Name "eth0" -MacAddressSpoofing On
    Set-VMNetworkAdapter -VMName "YourVMName" -Name "eth1" -MacAddressSpoofing On

Clean up activities 
Firewalld actually manages rules dynamically and doesn't necessarily read from /etc/sysconfig/iptables anymore unless you've configured it to do so. 
That command captures the current state of the raw iptables stack, but it might not reflect ongoing firewalld-managed config.
Recommendation:
This is an optional troubleshooting step, again make sure you know that firewalld usually doesnâ€™t read from that file automatically anymore.
    
    iptables-save > /etc/sysconfig/iptables

Pro Tip: Double-check that firewalld forwards traffic between zones by default â€” sometimes you may also need to allow forwarding from internal to external explicitly:
Otherwise, packets might get dropped between zones.
(Note: Firewalld usually allows inter-zone forwarding by default, so this rule is optional â€” it just ensures explicit acceptance and can help with troubleshooting if you have complex zone setups.)


    sudo firewall-cmd --zone=internal --add-rich-rule='rule family="ipv4" source address="10.1.1.0/24" accept'
    sudo firewall-cmd --permanent --zone=internal --add-rich-rule='rule family="ipv4" source address="10.1.1.0/24" accept'
    sudo firewall-cmd --reload



Option - Run a Caching DNS Server on the Router
ðŸ”Ž Why Itâ€™s Better
This approach is more robust for a network environment:
âœ… Local cache reduces repeated external DNS lookups.
âœ… Faster name resolution for all clients.
âœ… Lets you add internal DNS zones later if needed (like server1.local).

ðŸš€ Steps:
Hereâ€™s how to do it with dnsmasq (simpler than unbound for a basic router).

Install dnsmasq
    
    sudo yum install dnsmasq

Configure /etc/dnsmasq.conf:
    
    sudo nano /etc/dnsmasq.conf
    Add:
        # Listen on internal interface
        interface=eth1

        # Forward to external DNS (Google or your choice)
        server=8.8.8.8
        server=8.8.4.4

        # Optional: domain name for internal network
        domain=local

        # Cache size (tweak as needed)
        cache-size=1000

Enable and start the service:

    sudo systemctl enable dnsmasq
    sudo systemctl start dnsmasq

Set your routerâ€™s /etc/resolv.conf to point to itself:

    nameserver 127.0.0.1
    or
    nameserver 10.1.1.254

Configure your internal servers to use the routerâ€™s internal IP (10.1.1.254) as their DNS resolver. This way, they all benefit from the routerâ€™s DNS cache and you can add local zones later.

Which Should You Choose?
If you want fast and simple: Point /etc/resolv.conf at 8.8.8.8 or 1.1.1.1 and call it a day.
If you want better performance and flexibility: Use dnsmasq on the router.
If you want advanced DNS features (like DNSSEC or internal DNS zones), consider unbound (but thatâ€™s a bit more complex).

One Last Tip
If you go the caching route, you can combine that with local DNS records:
Now all your internal servers can resolve myserver.local using the routerâ€™s DNS server. ðŸŽ‰

Add a /etc/hosts entry on the router:
    
    10.1.1.10    myserver.local

Enable dnsmasq to read /etc/hosts:
    
    addn-hosts=/etc/hosts
Now all your internal servers can resolve myserver.local using the routerâ€™s DNS server. ðŸŽ‰


Option Steps:
Edit /etc/resolv.conf:

    sudo nano /etc/resolv.conf
    
    Add lines like this:
        nameserver 8.8.8.8
        nameserver 8.8.4.4

    You can also use
        nameserver 1.1.1.1
        nameserver 1.0.0.1

Tip:
If your system uses NetworkManager, /etc/resolv.conf might get overwritten on reboot. You can either:

Lock the file:

sudo chattr +i /etc/resolv.conf
Or configure DNS in your interface config (like with nmcli):

    sudo nmcli con mod eth1 ipv4.dns "8.8.8.8 8.8.4.4"
    sudo nmcli con up eth1


